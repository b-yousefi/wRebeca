reactiveclass Node()
{
    statevars
    {
        int sn; //node_sequence_number
        int ip;
        ///////////////////////////////////////
        //routing table
        ///////////////////////////////////////
        int[] dip;//destination IP address
        int[] dsn; //destination sequence number
        int[] route_state; // 0=>unconfirmed, 1=>valid(active or idle) and 2=>Invalid
        boolean[] neigh_state; // false means unknown(or blacklist) and true means confirmed
        int[][] hops; //number of hops
        int[][] nhop;
        boolean[][] pre; //if interested true, all neighbours who are “interested” in the route to dip           
        int[] store; //pointer: dip=>data for that dip
    }
    msgsrv initial(int i, boolean starter)
    { 
        ip          = i;
        sn          = 1;
        dip         = new int[4];
        dsn         = new int[4];
        route_state = new int[4];
        neigh_state = new boolean[4];
        hops        = new int[4][];
        nhop        = new int[4][];
        pre         = new boolean[4][]; //number of neighbours
        store                  = new int[4];
        
        for(int j=0;j<4;j++)
        {
            store[j]=0;
            pre[j]=new boolean[4];
            dsn[j]=-1;
            nhop[j] = new int[4];
            hops[j] = new int[4];
            neigh_state[j]=false;
            route_state[j]=0;
            for(int k=0;k<4;k++)
            {
                pre[j][k]=false;
                hops[j][k]=-1;
                nhop[j][k]=-1;
                
            }
            
        }
        if(starter==true)
        {   
            unicast(self,rec_newpkt(7,2)); 
        }      
    }
    
    msgsrv rec_newpkt(int data ,int dip_)
    {
        boolean[] affected_neighbours=new boolean[4];
        if(ip==dip_ ) {
            /* the DATA packet is intended for this node */
            //unicast(self,rec_deliver(data));
        }
        else
        { 
            /* the DATA packet is not intended for this node */
            store[dip_]=data;
            if(route_state[dip_]==1)
            {
                /* valid route to dip*/
                /* forward packet */
            }
            else{
                /* no valid route to dip*/
                /*send a new rout discovery request*/
                if(sn<3)
                {                           
                    sn++;
                   // unicast(self,resend_rreq(dip_));
                    rec_rreq(0,dip_,dsn[dip_],self,sn,self,4);
                }
            
            }
        } 
    }   
    
    msgsrv resend_rreq(int dip_)
    {
        if(sn<3)
        {                           
            sn++;
            unicast(self,resend_rreq(dip_));
            rec_rreq(0,dip_,dsn[dip_],self,sn,self,4);
        }
    }
        
    msgsrv rec_rreq(int hops_,int dip_ ,int dsn_ ,int oip_ ,int osn_ ,int sip_, int maxHop) 
    {
        int[]  dip_sqn=new int[4];
        int route_num;
        boolean[] affected_neighbours=new boolean[4];
        boolean gen_msg = false;      
        
        if(ip!=oip_)
        {
            if(dsn[oip_]==-1)
            {
                dsn[oip_]=osn_;
                route_num = 0;
                if(neigh_state[sip_]==true)
                {
                    route_state[oip_]=1;
                }
                else
                {
                    route_state[oip_]=0;
                }
                hops[oip_][0]=hops_;
                nhop[oip_][0]=sip_;
                gen_msg = true;
            }
            else
            {
                if(route_state[oip_]==0)
                {
                    dsn[oip_]=osn_;
                    route_num = 0;
                    for(int i=0;i<4;i++)
                    {
                        if(nhop[oip_][i]==-1 || nhop[oip_][i]==sip_)
                        {
                            route_num = i;
                            break;
                        }
                    }
                    if(neigh_state[sip_]==true)
                    {
                        route_state[oip_]=1;
                        //clear other nhop_hops
                        for(int i=0;i<4;i++)
                        {
                            hops[oip_][i]=-1;
                            nhop[oip_][i]=-1;    
                        } 
                        hops[oip_][0]=hops_;
                        nhop[oip_][0]=sip_;
                    }
                    else
                    {
                        route_state[oip_]=0;
                        hops[oip_][route_num]=hops_;
                        nhop[oip_][route_num]=sip_;
                    }
                }
                else
                {
                    if(route_state[oip_]==2 || neigh_state[sip_]==true)
                    {
                        //route is invalid, update the existing route 
                        if((dsn[oip_]==osn_ && hops[oip_][0]>hops_) || dsn[oip_]<osn_ )
                        {
                            dsn[oip_]=osn_;
                            if(neigh_state[sip_]==true)
                                route_state[oip_]=1;
                            else
                                route_state[oip_]=0;
                            hops[oip_][0]=hops_;
                            nhop[oip_][0]=sip_;
                            gen_msg = true;
                        }
                    }
                    else 
                    { 
                        //route_state is valid and neigh_state[sip_] is not confrimed, new route would be added if it offers improvement 
						route_num = 0;
						for(int i=0;i<4;i++)
						{
							if(nhop[oip_][i]==-1 || nhop[oip_][i]==sip_)
							{
								route_num = i;
								break;
							}
						}
					   if((dsn[oip_]==osn_ && hops[oip_][0]>hops_) || dsn[oip_]<osn_ )
					   {
						   
							dsn[oip_]=osn_;
							hops[oip_][route_num]=hops_;
							nhop[oip_][route_num]=sip_;
							gen_msg = true;
						}
                    } 
                }
            }
            if(gen_msg==true)
            {
                if(ip==dip_)
                {
                    boolean su = false;
                    pre[dip_][sip_]=true;
                    for(int i=0;i<4;i++)
                    {
                        int nh = nhop[dip_][i];
                        if(nh!=-1)
                            pre[oip_][nh]=true;
                    }                   
                    for(int i=0;i<4;i++)
                    {
                        if(nhop[oip_][i]!=-1)
                        {
                            int n_hop = nhop[oip_][i];
                            sn        = sn+1;
                            /* unicast a RREP towards oip of the RREQ */
                            unicast(n_hop,rec_rrep(0 , dip_ , sn , oip_ , self))    
                            succ:
                            {
                                route_state[oip_]=1;
                                neigh_state[n_hop]=true;
                                su = true;                         
                                break;                              
                            }
                            unsucc:
                            {                            
                                neigh_state[n_hop]=false;
                            }    
                        }
                    }
                    if(su==false && route_state[oip_]==1)
                    {
                         /*packet transmission is unsuccessful, a RERR message is generated */
                        route_state[oip_]=2;
                        dip_sqn[oip_]=dsn[oip_];
                        for(int k=0;k<4;k++)
                        {
                            if(pre[oip_][k]==true){
                                affected_neighbours[k]=true;
                            }
                        }
                        for(int j=0;j<4;j++)
                        {  
							for(int r=0;r<4;r++)
							{
								if(nhop[oip_][r]!=-1 && nhop[j][0]==nhop[oip_][r])
								{
									route_state [j]= 2;
									dip_sqn[j]=dsn[j];
									for(int k=0;k<4;k++)
									{
										if(pre[j][k]==true){
											affected_neighbours[k]=true;
										}
									}
									break;
								}
							}
                        }                     
                        groupcast(affected_neighbours,rec_rerr(dip_, self, dip_sqn));
                    }
                }
                else
                {
                    hops_ = hops_+1;
					if(hops_<maxHop) {
						rec_rreq(hops_,dip_,dsn_,oip_,osn_,self,maxHop);
					}
                }
            }    
        }     
    }  
    
    msgsrv rec_rrep(int hops_ ,int dip_ ,int dsn_ ,int oip_ ,int sip_)
    {      
        int[]  dip_sqn=new int[4];
        boolean[] affected_neighbours=new boolean[4];
        boolean gen_msg = false;
        int n_hop,route_num;
		if(dsn[dip_]==-1)
		{
			dsn[dip_]=dsn_;
			route_num = 0;
			if(neigh_state[sip_]==true)
			{
				route_state[dip_]=1;
			}
			else
			{
				route_state[dip_]=0;
			}
			hops[dip_][0]=hops_;
			nhop[dip_][0]=sip_;
			gen_msg = true;
		}
		else
		{
			if(route_state[dip_]==0)
			{
				dsn[dip_]=dsn_;
				route_num = 0;
				for(int i=0;i<4;i++)
				{
					if(nhop[dip_][i]==-1 || nhop[dip_][i]==sip_)
					{
						route_num = i;
						break;
					}
				}
				if(neigh_state[sip_]==true)
				{
					route_state[dip_]=1;
					//clear other nhop_hops
					for(int i=0;i<4;i++)
					{
						hops[dip_][i]=-1;
						nhop[dip_][i]=-1;    
					} 
					hops[dip_][0]=hops_;
					nhop[dip_][0]=sip_;
				}
				else
				{
					route_state[dip_]=0;
					hops[dip_][route_num]=hops_;
					nhop[dip_][route_num]=sip_;
				}
			}
			else
			{
				if(route_state[dip_]==2 || neigh_state[sip_]==true)
				{
					//route is invalid, update the existing route 
					if((dsn[dip_]==dsn_ && hops[dip_][0]>hops_) || dsn[dip_]<dsn_ )
					{
						dsn[dip_]=dsn_;
						if(neigh_state[sip_]==true)
							route_state[dip_]=1;
						else
							route_state[dip_]=0;
						hops[dip_][0]=hops_;
						nhop[dip_][0]=sip_;
						gen_msg = true;
					}
				}
				else 
				{ 
					//route_state is valid and neigh_state[sip_] is not confrimed, new route would be added if it offers improvement 
					route_num = 0;
					for(int i=0;i<4;i++)
					{
						if(nhop[dip_][i]==-1 || nhop[dip_][i]==sip_)
						{
							route_num = i;
							break;
						}
					}
				   if((dsn[dip_]==dsn_ && hops[dip_][0]>hops_) || dsn[dip_]<dsn_ )
				   {
					   
						dsn[dip_]=dsn_;
						hops[dip_][route_num]=hops_;
						nhop[dip_][route_num]=sip_;
						gen_msg = true;
					}
				} 
			}
		}
        if(gen_msg==true)
        {           
            /* this node is the originator of the corresponding RREQ */
            /* a packet may now be sent; this is done in the process AODV */
            if(ip==oip_ )
            {
				/* this node is the originator of the corresponding RREQ */
				/* a data packet may now be sent */            
            }
            else
            {
				boolean su = false;
                hops_ = hops_+1;
                pre[oip_][sip_]=true;
                for(int i=0;i<4;i++)
                {
                    n_hop = nhop[oip_][i];
                    if(n_hop!=-1)
                        pre[oip_][n_hop]=true;
                }
                for(int i=0;i<4;i++)
                {
                    if(nhop[oip_][i]!=-1)
                    {
                        n_hop = nhop[oip_][i];
                        unicast(n_hop,rec_rrep(hops_,dip_,dsn_,oip_,self))
                        succ:
                        {
                            route_state[oip_]=1;
                            neigh_state[n_hop]=true;
                            su = true;
                            break;
                        }
                        unsucc:
                        {
                            neigh_state[n_hop]=false;
                        }    
                    }
                }
				if(su==false && route_state[oip_]==1)
				{
					 /*packet transmission is unsuccessful, a RERR message is generated */
					route_state[oip_]=2;
					dip_sqn[oip_]=dsn[oip_];
					for(int k=0;k<4;k++)
					{
						if(pre[oip_][k]==true){
							affected_neighbours[k]=true;
						}
					}
					for(int j=0;j<4;j++)
					{  
						for(int r=0;r<4;r++)
						{
							if(nhop[oip_][r]!=-1 && nhop[j][0]==nhop[oip_][r])
							{
								route_state [j]= 2;
								dip_sqn[j]=dsn[j];
								for(int k=0;k<4;k++)
								{
									if(pre[j][k]==true){
										affected_neighbours[k]=true;
									}
								}
								break;
							}
						}
					}                     
					groupcast(affected_neighbours,rec_rerr(dip_, self, dip_sqn));
				}
            }
        }
    }
    
    msgsrv rec_rerr(int source_ ,int sip_, int[] rip_rsn) 
    {
        int[]  dip_sqn=new int[4];
        boolean[] affected_neighbours=new boolean[4];
        //regenerate rrer for invalidated routes
        if(ip!=source_)
        {
            for(int i=0;i<4;i++)
            {
                int rsn=rip_rsn[i];
                if(route_state[i]==1 && nhop[i][0]==sip_ && dsn[i]<rsn && rsn!=0)
                {
                    route_state [i]= 2;
                    dip_sqn[i]=dsn[i];
                    for(int j=0;j<4;j++)
                    {
                        if(pre[i][j]==true){
                            affected_neighbours[j]=true;
                            }
                    }
                } 
            }
            groupcast(affected_neighbours,rec_rerr(source_,self,dip_sqn));
        }
    }
       
    
}



main
{
    Node node0(node1,node3):(0,true);
    Node node1(node0,node3):(1,false);
    Node node2(node3):(2,false);
    Node node3(node2,node0,node1):(3,false);
    constraints
    {
        and(and(con(node0,node1),con(node0,node3)), and(con(node2,node3),con(node1,node3)))
    }  
}