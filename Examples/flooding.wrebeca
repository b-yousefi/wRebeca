reactiveclass Node()
{   
    statevars
    {    
        boolean destination;
    }
    
    msgsrv initial(boolean starter,boolean dest)
    {   
        destination=dest;
        if(starter==true)
        {
            relay_packet(55,1);
        }
    }
    
    
    msgsrv relay_packet(int data,int hopNum)
    {
        if(destination==true)
        {
            unicast(self,deliver_packet(data));
        }
        else{ 
            if(hopNum<2)
            {
                hopNum++;
                relay_packet(data,hopNum);
            }   
        }
    }
    msgsrv deliver_packet(int data)
    {
        
    }
}

main
{
    Node node0(node1,node3):(true,false);
    Node node1(node0,node3):(false,false);
    Node node2(node3):(false,false);
    Node node3(node0,node2,node1):(false,true);
    
    constraints
    {
      //  and (and (con (node0, node1), con (node0, node3)),and (con (node2, node3), con (node1, node3)))
      and(and(con(node0,node1),con(node0,node3)), con(node2,node3))
        //and(and(con(node0,node1), con(node2,node3)),and(con(node0,node3), con(node1,node3)))
    }

}